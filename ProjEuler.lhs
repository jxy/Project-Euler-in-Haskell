My solutions for Project Euler[1] in literate Haskell.

[1] http://projecteuler.net/
======================================================================


> import Data.Char
> import Data.List


Some simple mathematics.
======================================================================

> primes = let diff xs@(x:xt) ys@(y:yt) = case compare x y of
>                                         LT -> x : (diff xt ys)
>                                         EQ -> diff xt yt
>                                         GT -> diff xs yt
>              merge xs@(x:xt) ys@(y:yt) = case compare x y of
>                                          LT -> x : (merge xt ys)
>                                          EQ -> x : (merge xt yt)
>                                          GT -> y : (merge xs yt)
>              f (x:xt) ys = x : (merge xt ys)
>              g p         = [ n * p | n <- [p, p + 2 ..]]
>              nonprimes = foldr1 f . map g . tail $ primes
>          in [2, 3, 5] ++ (diff [7, 9 ..] nonprimes)

> fibonacci = 1:2:(zipWith (+) fibonacci $ tail fibonacci)

> primeFactors n = let f xs@(x:xt) n
>                          | n == 1 = []
>                          | n `rem` x == 0 = x:f xs (n `quot` x)
>                          | otherwise = f xt n
>                  in f primes n


Problem starts here.
======================================================================


Problem 1
05 October 2001

If we list all the natural numbers below 10 that are multiples of 3 or
5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

> p1 = sum $ filter (\x -> x `rem` 3 == 0 || x `rem` 5 == 0) [1..999]

Problem 2
19 October 2001

Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms will
be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not
exceed four million.

> p2 = sum $ filter even $ takeWhile (<= 4000000) fibonacci

Problem 3
02 November 2001

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

> p3 = let f xs@(x:xt) p n
>              | n < x = p
>              | n `rem` x /= 0 = f xt p n
>              | n `rem` x == 0 = f xs x $ n `quot` x
>      in f primes 1 600851475143

> p3' = let f x n | n < x*x = n
>                 | n `rem` x /= 0 = f (x + 1) n
>                 | n `rem` x == 0 = f (x + 1) (n `quot` x)
>       in f 2 600851475143

Problem 4
16 November 2001

A palindromic number reads the same both ways. The largest palindrome
made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit
numbers.

> p4 = let ddd = [999,998..100]
>          num = [x * y | x <- ddd, y <- ddd, x <= y]
>          palindrome n = let s = show n
>                         in s == reverse s
>      in head . filter palindrome $ sortBy (flip compare) num

Problem 5
30 November 2001

2520 is the smallest number that can be divided by each of the numbers
from 1 to 10 without any remainder.

What is the smallest number that is evenly divisible by all of the
numbers from 1 to 20?

> p5 = foldr lcm 1 [2..20]

Problem 6
14 December 2001

The sum of the squares of the first ten natural numbers is,
1^(2) + 2^(2) + ... + 10^(2) = 385

The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)^(2) = 55^(2) = 3025

Hence the difference between the sum of the squares of the first ten
natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one
hundred natural numbers and the square of the sum.

> p6 = let ns = [1..100]
>      in sum [ x * y | x <- ns, y <- ns, x /= y]

Problem 7
28 December 2001

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can
see that the 6^(th) prime is 13.

What is the 10001^(st) prime number?

> p7 = primes !! 10000

Problem 8
11 January 2002

Find the greatest product of five consecutive digits in the 1000-digit
number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

> p8 = let str = "73167176531330624919225119674426574742355349194934\
>                \96983520312774506326239578318016984801869478851843\
>                \85861560789112949495459501737958331952853208805511\
>                \12540698747158523863050715693290963295227443043557\
>                \66896648950445244523161731856403098711121722383113\
>                \62229893423380308135336276614282806444486645238749\
>                \30358907296290491560440772390713810515859307960866\
>                \70172427121883998797908792274921901699720888093776\
>                \65727333001053367881220235421809751254540594752243\
>                \52584907711670556013604839586446706324415722155397\
>                \53697817977846174064955149290862569321978468622482\
>                \83972241375657056057490261407972968652414535100474\
>                \82166370484403199890008895243450658541227588666881\
>                \16427171479924442928230863465674813919123162824586\
>                \17866458359124566529476545682848912883142607690042\
>                \24219022671055626321111109370544217506941658960408\
>                \07198403850962455444362981230987879927244284909188\
>                \84580156166097919133875499200524063689912560717606\
>                \05886116467109405077541002256983155200055935729725\
>                \71636269561882670428252483600823257530420752963450"
>          f [] = []
>          f ds = product (take 5 ds) : f (tail ds)
>      in maximum . f $ map digitToInt str

Problem 9
25 January 2002

A Pythagorean triplet is a set of three natural numbers, a < b < c,
for which, a^(2) + b^(2) = c^(2)

For example, 3^(2) + 4^(2) = 9 + 16 = 25 = 5^(2).

There exists exactly one Pythagorean triplet for which a + b + c =
1000.

Find the product abc.

> p9 = let ds = [1..500]
>          l = [a * b * (1000- a - b) | a <- ds, b <- ds,
>               a < b, a^2 + b^2 == (1000 - a - b)^2]
>      in head l

Problem 10
08 February 2002

The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.

> p10 = sum $ takeWhile (< 2000000) primes
